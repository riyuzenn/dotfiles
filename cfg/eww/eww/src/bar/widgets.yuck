;; Variables
(defpoll clock_time :interval "5m" "date '+\%I  %M %p'")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "10h" "date '+%d/%m'")
(defpoll volume_percent :interval "3s" "amixer get Master | awk '$0~/%/{print $4}' | tr -d '[]%'")
(defpoll mic_percent :interval "3s" "amixer sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll brightness_percent :interval "5s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defpoll battery :interval "15s" "./scripts/battery --bat")
(defpoll battery_status :interval "10s" "./scripts/battery --bat-st")
(defpoll battery_notif :interval "15s" "./scripts/battery --bat-notif")
(defpoll memory :interval "15s" "scripts/memory")
(defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
(defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
(defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")
(defvar vol_reveal false)
(defvar br_reveal false)

(defvar wifi_rev false)
(defvar time_rev false)
(deflisten workspace "scripts/workspace")

(defvar eww "$HOME/.local/bin/eww -c $HOME/.config/eww/")


(defpoll COL_WLAN :interval "1m" "./scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "./scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "./scripts/wifi --ICON")



(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

;; widgets

(defwidget wifi [] 
  (eventbox :onhover "${eww} update wifi_rev=true"
			  :onhoverlost "${eww} update wifi_rev=false"
		(box :vexpand "false" :hexpand "false" :space-evenly "false"
				(button :class "module-wif" :onclick "networkmanager_dmenu" :wrap "false" :limit-width 12 :style "color: ${COL_WLAN};" WLAN_ICON)
	(revealer :transition "slideright"
			  :reveal wifi_rev
			  :duration "350ms"
	(label    :class "module_essid"
			  :text ESSID_WLAN
			  :orientation "h"
			  )))))


(defwidget workspaces []
  (literal :content workspace))


(defwidget bat []
		(box :class "bat_module" :vexpand "false" :hexpand "false" 
            (button
              :tooltip "battery on ${battery}% [${battery_status}] ${battery_notif}"
              :onclick "./scripts/pop system"
              (circular-progress :value battery
                :class "batbar"
                :thickness 7
            
            ))))



(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false" 
            ;(circular-progress :value memory
            ;    :class "membar"
            ;    :thickness 4
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${memory}% ram"
                :onclick "./scripts/pop system"
                :show_truncated false
                :wrap false
                "")));)



(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "${eww} update time_rev=true"
			  :onhoverlost "${eww} update time_rev=false"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "3" 
      (label :text clock_time :class "clock_time_class" )
	  (revealer :transition "slideleft"
			  :reveal time_rev
			  :duration "350ms"
      (button :class "clock_date_class"
             :onclick "./scripts/pop calendar" clock_date
        )
  ))))

(defwidget powermenu []
		(box :class "power_module" :vexpand "false" :hexpand "false" 
            (button 
                :class "iconpower"
                :limit-width 1
                :tooltip "open power menu"
                :onclick "./scripts/pop power && ${eww} update escreen=true"
                :show_truncated false
                :wrap false
                "襤")))


  
(defwidget volume []
  (eventbox :onhover "${eww} update vol_reveal=true"
			  :onhoverlost "${eww} update vol_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
	(button   :onclick "scripts/pop audio"   :class "volume_icon" "墳")
	(revealer :transition "slideleft"
			  :reveal vol_reveal
			  :duration "350ms"
	(scale    :class "volbar"
			  :value volume_percent
			  :orientation "h"
			  :tooltip "${volume_percent}%"
			  :max 100
			  :min 0
			  :onchange "amixer sset Master {}%" )))))

(defwidget bright []
  (eventbox :onhover "${eww} update br_reveal=true" :onhoverlost "${eww} update br_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
    (label :text "" :class "bright_icon" :tooltip "brightness")
	(revealer :transition "slideleft"
			  :reveal br_reveal
			  :duration "350ms"
	(scale    :class "brightbar"
			  :value brightness_percent
			  :orientation "h"
			  :tooltip "${brightness_percent}%"
			  :max 100
			  :min 0
			  :onchange "brightnessctl set {}%" )))))



	;;  Launcher
(defwidget launcher [] 
    (box :class "launcher"
		  (button 
        :class "launcher-btn" 
        :orientation "h" 
        :space-evenly "false"
        :onclick "./scripts/appmenu"
		"")))



(defwidget left []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "end"
		 :class "left_modules"
(bright)
(volume)
(wifi)
(bat)
(mem)
(sep)
(powermenu)))

(defwidget right []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "start"
		 :class "right_modules"
(launcher)
(workspaces)))


(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
(clock_module)))

(defwidget bar []
  (box :class "bar_class"
       :orientation "h"
  (right)
  (center)
  (left)
    ))

  
(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
  (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
      (circular-progress :value battery
                :class "sys_bat"
                :thickness 9
            (label :text ""
                :class "sys_icon_bat"
                :limit-width 2
                :show_truncated false
                :wrap false))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${battery}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${battery_status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))
            (label :text "" :class "sys_sep" :halign "center")
  (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
      (circular-progress :value memory
                :class "sys_mem"
                :thickness 9
            (label :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${memory_used_mb} | ${memory_total_mb}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${memory_free_mb}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))))

(defwidget cal []
	(box :class "cal" :orientation "v"
	(box :class "cal-in"
	(calendar :class "cal" 
			  :day calendar_day 
			  :year calendar_year))))


(defwidget audio []
	(box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "speaker_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
	(box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value volume_percent
              :space-evenly "false"
			  :orientation "h"
			  :onchange "amixer sset Master {}%" 
              :tooltip "volume on ${volume_percent}%"
			  :max 100
			  :min 0))))
            (label :text "" :class "audio_sep" :halign "center")
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "mic_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
	(box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value mic_percent
              :space-evenly "false"
			  :orientation "h"
              :tooltip "mic on ${mic_percent}%"
			  :onchange "amixer sset Capture {}%" 
			  :max 100
			  :min 0))))))

(defwidget power []

    (box :orientation "h" :space-evenly "true"
        (box :class "power_menu" :orientation "h" :space-evenly "false" :halign "center" :valign "center"
            (button :class "shutdown-btn" :onclick "$HOME/.config/eww/scripts/powerAction poweroff" :tooltip "Shutdown" "")
            (button :class "reboot-btn" :onclick "$HOME/.config/eww/scripts/powerAction reboot" :tooltip "Reboot" "")
            (button :class "sleep-btn" :onclick "$HOME/.config/eww/scripts/powerAction suspend" :tooltip "Sleep" "")
            (button :class "hibernate-btn" :onclick "$HOME/.config/eww/scripts/powerAction hibernate" :tooltip "Hibernate" "")
            (button :class "logout-btn" :onclick "$HOME/.config/eww/scripts/powerAction logout &" :tooltip "Logout" "")
            (button :class "logout-btn" :onclick "$HOME/.config/eww/scripts/pop power &" :tooltip "Back" "")
            ;(button :class "lock-btn" :onclick "$HOME/.local/bin/lck" "")
        )
    )

)
